Name,Question,Answer
Checksum ,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Checksum</span></strong></p>","<ul>	<li>A string generated by a hash algorithm/hash function that can allow us to determine changes to a stream of data, i.e. by comparing result of a hash algorithm after data transfer to one we generated before data transfer.</li>	<li>In digital preservation we tend to use the term checksum interchangeably with the word hash – the fixed length string generated by something called a cryptographic hash function (MD5, SHA1, SHA256, etc.).</li>	<li>Checksum may also refer to the process of comparing two checksum values – checking the sum – for changes in the data stream.</li>	<li>A checksum will usually be made up of hexadecimal characters 0-9 and A-F, e.g. <em>d41d8cd98f00b204e9800998ecf8427e</em></li></ul>"
Purpose of a Checksum,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Purpose of a Checksum</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A checksum algorithm calculates a fixed length string based on the data in a file alone.</p><p class=""medium"" style=""text-align: center;"">A file with the letters USA has MD5 checksum <em>f75d91cdd36b85cc4a8dfeca4f24fa14</em> will always have the check sum <em>f75d91cdd36b85cc4a8dfeca4f24fa14</em>. If a single bit changes, it will be unrecognisably otherwise.</p><p class=""medium"" style=""text-align: center;"">A file with the letters USB has checksum, <em>7aca5ec618f7317328dcd7014cf9bdcf</em> (USA to USB is a change of just 2-bits).</p><p class=""medium"" style=""text-align: center;"">Checksums are great for spotting data integrity errors – the key to digital preservation.</p><p class=""medium"" style=""text-align: center;"">Bit level preservation is simply about checking the checksums – constantly.</p>"
Data vs. Filename,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Data vs. Filename</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums are calculated on the data inside a file. If a filename changes, the checksum of the value is still the same because the data inside hasn’t been changed. If a file is copied, and given another filename the checksum of the two files will be identical.</p><p class=""medium"" style=""text-align: center;"">Checksums only operate on the data inside the file.</p>"
Hash Function,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Hash Function</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A mapping of data of arbitrary length to a fixed length string, the output of a hash function can be called a hash value, hash code, digest, or simply a hash. A checksum in digital preservation is a hash of the data inside a file.</p>"
Digest,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Digest</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A fixed length string. The output of a hash function.</p>"
Cryptographic Hash Function,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Cryptographic Hash Function</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A cryptographic hash function is a one way function such that the original data cannot be determined from the hash value itself – it is infeasible to invert the function. Cryptographic hashes are considered quick. The cryptographic hash functions employed in digital preservation have wide application as well and so are considerably well tested and there are many tools that can support their use in our workflows.</p>"
One Way Function,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">One Way Function</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A transformation of data such that the result cannot be transformed back into the original.</p>"
What do they look like?,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">What do checksums look like?</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Fixed length strings. Hexadecimal characters 0-9, A-F.</p>"
MD5,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">MD5</span></strong></p>","<ul>	<li class=""medium"">Message Digest 5.</li>	<li class=""medium"">32 character string.</li>	<li class=""medium"">Theoretically, 21 quintillion files needed for a collision.</li></ul><p> </p>"
SHA-1,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">SHA-1</span></strong></p>","<ul>	<li class=""medium"">Secure Hash Algorithm 1.</li>	<li class=""medium"">40 character string.</li>	<li class=""medium"">Theoretically 1 septillion files needed for a collision.</li></ul>"
SHA-256,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">SHA-256</span></strong></p>","<ul>	<li class=""medium"">Secure Hash Algorithm 256.</li>	<li class=""medium"">64 character string.</li>	<li class=""medium"">Theoretically 400 undecillion files needed for a collision.</li></ul><p> </p>"
Other Cryptographic Hashes,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Other Cryptographic Hashes...</span></strong></p>",<ul>	<li>BLAKE-256</li>	<li>BLAKE-512</li>	<li>MD5</li>	<li>RadioGatún</li>	<li>RIPEMD</li>	<li>SHA-1</li>	<li>SHA-256</li>	<li>Spectral Hash</li>	<li>Streebog</li>	<li>SWIFFT</li>	<li>Tiger</li>	<li>Whirlpool	<ul>	</ul>	</li></ul>
d41d8cd98f00b204e9800998ecf8427e,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">d41d8cd98f00b204e9800998ecf8427e</span></strong></p>",<p>The MD5 checksum of a zero byte file. Other checksums capable of generating a hash from a zero-byte file include:</p><ul>	<li><strong>MD5</strong>: <em>d41d8cd98f00b204e9800998ecf8427e</em></li>	<li><strong>SHA1</strong>: <em>da39a3ee5e6b4b0d3255bfef95601890afd80709</em></li>	<li><strong>SHA256</strong>: <em>e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</em></li></ul>
Collisions,"<p class=""large"" style=""text-align: center;""><span class=""large""><strong>Collisions</strong></span></p>","<ul>	<li>A collision happens when two different data streams result in the same checksum value.</li>	<li>This is a big concern when a checksum is used for security purposes (e.g. in password applications).</li>	<li>A collision is computationally difficult to engineer but not impossible.</li>	<li>Collisions could of course be incidental.</li>	<li>An engineered collision for SHA1 recently took knowledge of the algorithm, plus <strong>9,223,372,036,854,775,808</strong> SHA-1 computations, <strong>6,500 years</strong> of CPU (Central Processing Unit) time, and <strong>110 years</strong> of GPU (Graphics Processing Unit) time, to create.</li>	<li>Collisions are not a huge concern in digital preservation because multiple checksums may often be created for a single file to avoid such a situation.</li>	<li>Archivists also have the concept of fixity.</li>	<li>Collisions are a bigger concern when workflows require on just a single checksum to align large amounts of data.</li></ul>"
SHA1DEEP,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">SHA1DEEP</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A useful tool available for Linux and Windows for generating checksums recursively for a directory or directories of files. SHA1DEEP has compatriot tools MD5DEEP and SHA256DEEP.</p>"
Supported in Rosetta,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Supported in Rosetta</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums supported in the Rosetta digital preservation system are, <strong>CRC32</strong>, <strong>MD5</strong>, and <strong>SHA1</strong></p>"
AV Preserve Fixity,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">AV Preserve Fixity</span></strong></p>","<p class=""medium"" style=""text-align: center;"">AV Preserve Fixity is a software agent for scheduling the scanning and checking of checksums for a given directory or directories of files. If a comparison fails, that is a file that is expected to match doesn’t, then an email is sent prompting users about the error enabling them to initiate procedures to return original data from backups. The tool is maintained by AV Preserve.</p>"
Supported by DROID,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Supported by DROID</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums supported in DROID are <strong>MD5</strong>, <strong>SHA1</strong>, and <strong>SHA256</strong></p>"
De-duplication,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">De-duplication</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Because a data input will always output the same checksum value, checksums are great for de-duplication, that is removal of duplicate files with the same information.</p><p class=""medium"" style=""text-align: center;"">In an archival context this may be more complicated where a duplicate record has multiple contexts.</p><p class=""medium"" style=""text-align: center;"">In some storage systems, checksums can be used to store no more than one copy of an object that can then be referenced from multiple contexts.</p>"
Authenticity and Integrity,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Authenticity and Integrity</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums can prove data hasn’t changed which can help us to prove a record's authenticity and integrity from the point of transfer.</p><p class=""medium"" style=""text-align: center;"">In UNESCO memory of the world terms, integrity is the quality of being ‘uncorrupted and free of unauthorized and undocumented changes’ (UNESCO 2003).</p>"
UNESCO definition of integrity,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">UNESCO definition of integrity</span></strong></p>","<p class=""medium"" style=""text-align: center;"">The state of being whole, uncorrupted and free of unauthorised and undocumented changes. (UNESCO, 2003)</p>"
Automation,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Automation</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums are unique to a data stream and thus can become unique, fixed-length, identifiers for those files. We can keep track of our files through various automated workflows through the use of checksums.</p>"
Just a large number!,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Just a large number!</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Checksums are just really big numbers. Computers are really good at working with numbers that is why they are good for automated processes and comparisons. If we convert hexadecimal d41d8cd98f00b204e9800998ecf8427e to a decimal number in Google we get 2.8194977e+38</p>"
Hexadecimal ,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Hexadecimal</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A number system of 16 characters, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Hexadecimal can represent all numbers. Its primary application is the representation of binary numbers in the form of two digit bytes. Hexadecimal makes binary easier to read, for example, the number 255, in binary is, 0b11111111, and in hexadecimal is 0xFF. A hexadecimal number is often prefixed with the number zero and letter ‘x’ to signal the following characters are hexadecimal.</p>"
Checksums vs. Fixity,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Checksums vs. Fixity</span></strong></p>","<p class=""medium"" style=""text-align: center;"">If a checksum should fail for any reason, archivists also have the concept of fixity. The concept of ‘remaining fixed in state'. We can observe file date ranges, e.g. modified and creation date. We can also look at the content and clues in the content for features that help us to prove a digital file is what it purports to be. There is only one Domesday Book – we have many ways of proving this is what it is without a checksum value per se.</p>"
Deterministic but Unpredictable,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Deterministic but Unpredictable</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Cryptographic hashes are deterministic meaning for a given piece of data, the same output will always be generated. That is, the same checksum value.</p><p class=""medium"" style=""text-align: center;"">Output is, however, unpredictable between inputs meaning that similar (not the same) output results in a radically different looking checksum value so the original data cannot be predicted.</p>"
Uniform Distribution,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Uniform Distribution</span></strong></p>","<p class=""medium"" style=""text-align: center;"">A feature of a cryptographic hash function that makes it difficult to reverse engineer. The range of outputs for any given input is uniformly distributed meaning every possible output has an equal chance of occurring – you won’t see chunks of similar checksums output for similar (not the same) chunks of data.</p>"
Infeasible to Invert,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Infeasible to Invert</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Means it is computationally difficult and time consuming to reverse engineer the output of a cryptographic hash function. The one mechanism to do it would be to try all possible combinations of input, yet, original data size is not known, and there are no clues to the original data type or content.</p>"
Fuzzy Hashes,"<p class=""large"" style=""text-align: center;""><strong><span class=""large"">Fuzzy Hashes</span></strong></p>","<p class=""medium"" style=""text-align: center;"">Having understood checksums, one might also be interested in fuzzy hashes. These are used in an alternative way to the checksums discussed here.</p><p class=""medium"" style=""text-align: center;"">Fuzzy hashes are used to determine the similarity of content – e.g. to determine when only small changes have been made to a data stream.</p><p class=""medium"" style=""text-align: center;"">This property of fuzzy hashes can be exploited to perform content sentencing, or to point users to similar content if there is a record available.</p>"
